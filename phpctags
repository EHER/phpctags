#!/usr/bin/env php
<?php
if (file_exists($autoload = __DIR__ . '/vendor/autoload.php')) {
    require($autoload);
} elseif (file_exists($autoload = __DIR__ . '/../../autoload.php')) {
    require($autoload);
} else {
    die(
        'You must set up the project dependencies, run the following commands:'.PHP_EOL.
        'curl -s http://getcomposer.org/installer | php'.PHP_EOL.
        'php composer.phar install'.PHP_EOL
    );
}

$options = getopt('af:R',array(
    'append::',
    'debug',
    'exclude:',
    'excmd::',
    'fields::',
    'format::',
    'recurse::',
    'version',
    'memory::',
));

if(!isset($options['debug'])) {
    error_reporting(0);
}

if(isset($options['version'])) {
    echo <<<'EOF'
Version: 0.2

Exuberant Ctags compatiable PHP enhancement, Copyright (C) 2012 Techlive Zheng
Addresses: <techlivezheng@gmail.com>, https://github.com/techlivezheng/phpctags

EOF;
    exit;
}

$file = realpath(array_pop($argv));

if(!isset($options['excmd']))
    $options['excmd'] = 'pattern';
if(!isset($options['format']))
    $options['format'] = 2;
if(!isset($options['memory']))
    $options['memory'] = '128M';
if(!isset($options['fields'])) {
    $options['fields'] = array('n', 'k','s', 'a');
} else {
    $options['fields'] = str_split($options['fields']);
}

// if the memory limit option is set and is valid, adjust memory
if (isset($options['memory'])) {
    $memory_limit = trim($options['memory']);
    if (isMemoryLimitValid($memory_limit)) {
        ini_set('memory_limit', $memory_limit);
    }
}

if(isset($options['append'])) {
    if ($options['append'] === FALSE || yes_or_no($options['append']) == 'yes') {
        $options['a'] = FALSE;
    } else if (yes_or_no($options['append']) != 'no') {
        die('phpctags: Invalid value for "append" option');
    }
}

if(isset($options['recurse'])) {
    if ($options['recurse'] === FALSE || yes_or_no($options['recurse']) == 'yes') {
        $options['R'] = FALSE;
    } else if (yes_or_no($options['recurse']) != 'no') {
        die('phpctags: Invalid value for "recurse" option');
    }
}

$ctags = new PHPCtags();
$result = $ctags->export($file, $options);

if (isset($options['f']) && $options['f'] !== '-') {
    $tagfile = fopen($options['f'], isset($options['a']) ? 'a' : 'w');
} else {
    $tagfile = fopen('php://stdout', 'w');
}
fwrite($tagfile, $result);
fclose($tagfile);

function yes_or_no($arg) {
    if (preg_match('/\b[Y|y]([E|e][S|s])?\b/', $arg)) {
        return 'yes';
    } else if (preg_match('/\b[N|n]([O|o])?\b/', $arg)) {
        return 'no';
    } else {
        return false;
    }
}

function isMemoryLimitValid($memory_limit) {
    if ($memory_limit == "-1") {
        // no memory limit
        return true;
    } elseif (is_numeric($memory_limit) && $memory_limit > 0) {
        // memory limit provided in bytes
        return true;
    } elseif (preg_match("/\d+\s*[KMG]/", $memory_limit)) {
        // memory limit provided in human readable sizes
        // as specified here: http://www.php.net/manual/en/faq.using.php#faq.using.shorthandbytes
        return true;
    }

    return false;
}
